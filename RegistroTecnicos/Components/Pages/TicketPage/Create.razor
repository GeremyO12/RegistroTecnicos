@page "/Ticket/Create"
@page "/Ticket/Create/{TicketId:int}"
@inject TicketService ticketService
@rendermode InteractiveServer

<EditForm Model="Tickets" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    @*Alerta Guardado*@
    <Alert Color="@alertColorGuardo" Dismissable="false" Hidden="@(!mostrarNotificacion)">
        <Icon Name="@alertIconNameGuardo" class="me-2"></Icon>@alertaGuardo
    </Alert>
    @*Alerta Error al guardar*@
    <Alert Color="@alertColorError" Dismissable="false" Hidden="@(!mostrarNotificacion)">
        <Icon Name="@alertIconNameError" class="me-2"></Icon>@alertaError
    </Alert>
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de Tickets</h3>
        </div>
        <div class="card-body">
            @*TicketId*@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TicketId" class="form-label">TicketId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Tickets.TicketId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                            <ValidationMessage For="@(() => Tickets.TicketId)" />
                        </div>
                    </div>
                </div>
            </div>
            @*Fecha*@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Tickets.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Tickets.Fecha)" />
            </div>
            @*Prioridad*@
            <div class="mb-3">
                <label for="Prioridad" class="form-label">Prioridad:</label>
                <InputText @bind-Value="Tickets.Prioridad" class="form-control" />
                <ValidationMessage For="@(() => Tickets.Prioridad)" />
            </div>
            @*ClienteId*@
            <div class="mb-3">
                <label for="ClienteId" class="form-label">ClienteId:</label>
                <InputNumber @bind-Value="Tickets.ClienteId" class="form-control" />
                <ValidationMessage For="@(() => Tickets.ClienteId)" />
            </div>
            @*Asunto*@
            <div class="mb-3">
                <label for="Asunto" class="form-label">Asunto:</label>
                <InputText @bind-Value="Tickets.Asunto" class="form-control" />
                <ValidationMessage For="@(() => Tickets.Asunto)" />
            </div>
            @*Descripcion*@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Tickets.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Tickets.Descripcion)" />
            </div>
            @*TiempoInvertido*@
            <div class="mb-3">
                <label for="TiempoInvertido" class="form-label">TiempoInvertido:</label>
                <InputNumber @bind-Value="Tickets.TiempoInvertido" class="form-control" />
                <ValidationMessage For="@(() => Tickets.TiempoInvertido)" />
            </div>
            @*TecnidoId*@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TecnicoId" class="form-label">TecnicoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Tickets.TecnicoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            @*Boton Nuevo*@
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
            @*Boton Guardar*@
            <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
            @*Boton Retroceder*@
            <a type="button" href="/Ticket/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int TicketId { get; set; }
    public Tickets Tickets { get; set; } = new Tickets { Fecha = DateTime.Today };
    public bool mostrarNotificacion = false;
    AlertColor alertColorGuardo, alertColorError;
    IconName alertIconNameError, alertIconNameGuardo;
    string alertaGuardo = "", alertaError = "";


    protected override async Task OnInitializedAsync()
    {
        if (TicketId != 0)
        {
            var ticket = await ticketService.Buscar(TicketId);
            if (ticket != null)
            {
                Tickets = ticket;
            }
        }
    }

    public async Task MostrarNotificacion()
    {
        mostrarNotificacion = true;
        StateHasChanged();
        await Task.Delay(5000);
        mostrarNotificacion = false;
        StateHasChanged();
    }

    public void AlertaGuardado()
    {
        alertColorGuardo = AlertColor.Success;
        alertIconNameGuardo = IconName.CheckCircleFill;
        alertaGuardo = "El ticket se registró de manera correcta.";
    }

    public void AlertaError()
    {
        alertColorError = AlertColor.Danger;
        alertIconNameError = IconName.ExclamationTriangleFill;
        alertaError = "Ya existe un ticket registrado con ese nombre.";
    }

    public async Task Guardar()
    {
        if (await Validar())
        {
            AlertaError();
            await MostrarNotificacion();
            return;
        }

        var guardado = await ticketService.Guardar(Tickets);
        if (guardado)
        {
            AlertaGuardado();
            await MostrarNotificacion();
            Nuevo();
        }
        else
        {
            AlertaError();
            await MostrarNotificacion();
        }
    }

    public void Nuevo()
    {
        Tickets = new Tickets();
    }

    public async Task<bool> Validar()
    {
        return await ticketService.Existe(Tickets.Prioridad, Tickets.TicketId);
    }

    private void ActualizarFecha(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int anio))
        {
            int mes = Tickets.Fecha.Month;
            int dia = Math.Min(Tickets.Fecha.Day, DateTime.DaysInMonth(anio, mes));

            Tickets.Fecha = new DateTime(anio, mes, dia);
        }
    }

}
